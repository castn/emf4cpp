/*
 * Mapping.ext
 * Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>
 * Copyright (C) INCHRON AG 2020 <emf4cpp@inchron.com>
 * 
 * EMF4CPP is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * EMF4CPP is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import org::eclipse::emf::ecore;

// EDataType/C++ type map
String getEDataTypeMap(EDataType d, String type_parameters) : switch (d.name)
{
	case "EBigDecimal": "long double" // Will change. See http://beta.boost.org/community/sandbox.html for BigDecimal and BigInt
	case "EBigInteger": "int64_t" // Will change for GMP
	case "EBoolean": "bool"
	case "EBooleanObject": "bool" // See if we have to implement some different classes for object-types
	case "EByte": "unsigned char"
	case "EByteArray": "std::vector<unsigned char>"
	case "EByteObject": "unsigned char"
	case "EChar": "char16_t" // The underlying Java 'char' type is an unsigned 16 bit integer type 
	case "ECharacterObject": "char16_t"
	case "EDate": "::ecorecpp::mapping::EDate" // Wrapper class of std::tm struct
 	case "EDiagnosticChain": "int" // ?? Need class
	case "EDouble": "double"
	case "EDoubleObject": "double" // Object/value?
	case "EEList": "::ecore::EList_ptr<" + type_parameters +">"
	case "EEnumerator": "int" // ?? Need class
	case "EFeatureMap": "int" // ?? Need class
	case "EFeatureMapEntry": "int" // ?? Need class
	case "EFloat": "float" 
	case "EFloatObject": "float" // Object/value?
	case "EInt": "int"
	case "EIntegerObject": "int" // Object/value?
	case "EJavaClass": "int" // ?? Need class
	case "EJavaObject": "::ecorecpp::mapping::any"
	case "ELong": "int64_t"
	case "ELongObject": "int64_t" // Object/value?
	case "EMap": "std::map<" + type_parameters +">"
	                    // maybe std::map<std::string, ecore::EObject> ó la versión con shared_ptr 
	case "EResource": "::ecorecpp::resource::Resource_ptr" // ?? Need class
	case "EResourceSet": "::ecorecpp::resource::ResourceSet_ptr" // ?? Need class
	case "EShort": "short"
	case "EShortObject": "short" // Object/value?
	case "EString": "::ecorecpp::mapping::type_definitions::string_t"
	case "ETreeIterator": "::ecorecpp::util::TreeIterator<" + type_parameters +">"
	case "EInvocationTargetException": "int" // ?? Need class
	
	/* Support for synthesis of XMLType.ecore */
	case "AnySimpleType": "::ecorecpp::mapping::any" // maps to java.lang.Object
	case "AnyURI": "::ecorecpp::mapping::type_definitions::string_t"
	case "Base64Binary": "::ecorecpp::mapping::type_definitions::string_t"
	case "Boolean": "bool"
	case "BooleanObject": "bool"
	case "Byte": "int8_t"
	case "ByteObject": "int8_t"
	case "Date": "::ecorecpp::mapping::EDate"
	case "DateTime": "::ecorecpp::mapping::EDate"
	case "Decimal": "::ecorecpp::mapping::type_definitions::string_t"
	case "Double": "double"
	case "DoubleObject": "double"
	case "Duration": "int" // ?
	case "ENTITIES": "::ecore::EList_ptr< ::ecorecpp::mapping::type_definitions::string_t >"
	case "ENTITIESBase": "::ecorecpp::mapping::type_definitions::string_t"
	case "ENTITY": "::ecorecpp::mapping::type_definitions::string_t"
	case "Float": "float"
	case "FloatObject": "float"
	case "GDay": "int" // ?
	case "GMonth": "int" // ?
	case "GMonthDay": "int" // ?
	case "GYear": "int" // ?
	case "GYearMonth": "int" // ?
	case "HexBinary": "::ecorecpp::mapping::type_definitions::string_t"
	case "ID": "::ecorecpp::mapping::type_definitions::string_t"
	case "IDREF": "::ecorecpp::mapping::type_definitions::string_t"
	case "IDREFS": "::ecore::EList_ptr< ::ecorecpp::mapping::type_definitions::string_t >"
	case "IDREFSBase": "::ecore::EList_ptr< ::ecorecpp::mapping::type_definitions::string_t >"
	case "Int": "int"
	case "Integer": "int64_t" // XMLType.ecore references BigInteger
	case "IntObject": "int"
	case "Language": "::ecorecpp::mapping::type_definitions::string_t"
	case "Long": "int64_t"
	case "LongObject": "int64_t"
	case "Name": "::ecorecpp::mapping::type_definitions::string_t"
	case "NCName": "::ecorecpp::mapping::type_definitions::string_t"
	case "NegativeInteger": "int64_t"
	case "NMTOKEN": "::ecorecpp::mapping::type_definitions::string_t"
	case "NMTOKENS": "::ecore::EList_ptr< ::ecorecpp::mapping::type_definitions::string_t >"
	case "NMTOKENSBase": "::ecore::EList_ptr< ::ecorecpp::mapping::type_definitions::string_t >"
	case "NonNegativeInteger": "uint64_t"
	case "NonPositiveInteger": "int64_t"
	case "NormalizedString": "::ecorecpp::mapping::type_definitions::string_t"
	case "NOTATION": "int" // ?
	case "PositiveInteger": "uint64_t"
	case "QName": "::ecorecpp::mapping::type_definitions::string_t"
	case "Short": "int16_t"
	case "ShortObject": "int" // ?
	case "String": "::ecorecpp::mapping::type_definitions::string_t"
	case "Time": "int" // ?
	case "Token": "::ecorecpp::mapping::type_definitions::string_t"
	case "UnsignedByte": "uint8_t"
	case "UnsignedByteObject": "uint8_t"
	case "UnsignedInt": "unsigned int"
	case "UnsignedIntObject": "unsigned int"
	case "UnsignedLong": "uint64_t"
	case "UnsignedShort": "uint16_t"
	case "UnsignedShortObject" : "uint16_t"
	
	default: // fallback
		"int"
};

String getEDataTypeMap(EDataType d) :
	getEDataTypeMap(d, "")
;

String getEDataTypeTemplateParameters(EDataType d, String prefix) :
	getEDataTypeTemplateParametersImpl(d.ETypeParameters, prefix)
;

String getEDataTypeTemplateParametersImpl(List[ETypeParameter] this, String prefix) :
if isEmpty then
		""
	else
		if size == 1 then
			prefix + first().name
		else
			prefix + first().name + "," + withoutFirst().getEDataTypeTemplateParametersImpl(prefix)
;


// C++ complex type? (i.e. not primitive, passed by const reference)
boolean cppComplexType (EDataType d) : switch (d.name)
{
	case "EByteArray": true
	case "EEList": true
	case "EJavaObject": true
	case "EString": true
	case "ENTITIES": true
	case "IDREFS": true
	case "IDREFSBase": true
	case "NMTOKENS": true
	case "NMTOKENSBase": true
	default: // fallback
		false
};

