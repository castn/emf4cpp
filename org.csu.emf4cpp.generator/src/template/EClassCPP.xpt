«REM»
EClassCPP.xpt
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Classes»
«EXTENSION template::Operations»
«EXTENSION template::Attributes»
«EXTENSION template::References»
«EXTENSION template::Packages»
«EXTENSION template::Member»
«EXTENSION template::Types»

«DEFINE cpp FOR EClass»
«FILE getFQN("/")+".cpp"-»
«IF (boolean) GLOBALVAR internalLicense»
«EXPAND template::License::License FOR getFQN("/")+".cpp"-»
«ELSE»
«EXPAND template::EndUserLicense::License FOR getFQN("/")+".cpp"-»
«ENDIF»
#include "«name».hpp"
«FOREACH getAllIncludeFiles() AS include-»
#include <«include».hpp>
«ENDFOREACH-»
#include <ecore/EObject.hpp>
#include <ecore/EClass.hpp>
#include "«EPackage.getPackagePrefix()».hpp"
#include <ecorecpp/mapping.hpp>

#ifdef ECORECPP_NOTIFICATION_API
#include <ecorecpp/notify.hpp>
#endif

«PROTECT CSTART '/*' CEND '*/' ID name+".cpp" DISABLE»
// Please, enable the protected region if you add manually written code.
// To do this, add the keyword ENABLED before START.
«ENDPROTECT»

using namespace ::«EPackage.getFQN()»;

// Default constructor
«name»::«name»()
{
«PROTECT CSTART '/*' CEND '*/' ID name+"Impl__"+name+"Impl" DISABLE»
// Please, enable the protected region if you add manually written code.
// To do this, add the keyword ENABLED before START.
«ENDPROTECT»

#ifdef ECORECPP_NOTIFICATION_API
    m_eDeliver = false;
#endif
}

«IF "::"+this.getFQN() == "::ecore::EObject"-»
// Copy constructor only for EObject, needed to properly initialize reference counting
«name»::«name»(const «name»&)
{
«PROTECT CSTART '/*' CEND '*/' ID name+"Impl__"+name+"ImplConst" DISABLE»
// Please, enable the protected region if you add manually written code.
// To do this, add the keyword ENABLED before START.
«ENDPROTECT»

#ifdef ECORECPP_NOTIFICATION_API
    m_eDeliver = false;
#endif
}
«ENDIF»

«name»::~«name»()
{
    «FOREACH this.EReferences.select(e|e.containment) AS ref-»
        «IF ref.upperBound == 1-»
    if («ref.getMemberName()»)
    {
        «ref.getMemberName()».reset();
    }
        «ENDIF-»
    «ENDFOREACH-»
}

// Attributes
«FOREACH this.EAttributes AS at»
«IF !at.derived && !at.volatile-»
«at.getGetCPPSignatureConst(name+"::")»
«ELSE-»
«at.getGetCPPSignature(name+"::")»
«ENDIF-»
{
«IF !at.volatile && !at.derived-»
    return «at.getAttrMemberName()»;
«ELSE-»
«IF at.getGetter() != null-»
#if 0
    // This is the original body of the EOperation as specified in
    // the ecore. If you want to replace it by C++ code, enable
    // the following protected region and implement it there.
    «at.getGetter()»
#endif
«ENDIF-»
    «PROTECT CSTART '/*' CEND '*/' ID (name+"Impl_"+"Getter_"+at.getIPPFileUniqueName()) DISABLE»
    // Please, enable the protected region if you add manually written code.
    // To do this, add the keyword ENABLED before START.
«IF at.getGetter() == null-»
    throw "UnsupportedOperationException: «at.getFQN()»";
«ELSE-»
    «IF (boolean) GLOBALVAR ignoreJavaBody-»
    throw "UnsupportedOperationException: «at.getFQN()»";
    «ELSE-»
    «at.getGetter()»
    «ENDIF-»
«ENDIF-»
    «ENDPROTECT»
«ENDIF-»
}

«IF at.changeable && !at.derived»
«at.getSetCPPSignature(name+"::")»
{
«IF at.volatile-»
«IF at.getSetter() != null-»
#if 0
    // This is the original body of the EOperation as specified in
    // the ecore. If you want to replace it by C++ code, enable
    // the following protected region and implement it there.
    «at.getSetter()»
#endif
«ENDIF-»
    «PROTECT CSTART '/*' CEND '*/' ID (name+"Impl_"+"Setter_"+at.getIPPFileUniqueName()) DISABLE»
    // Please, enable the protected region if you add manually written code.
    // To do this, add the keyword ENABLED before START.
«IF at.getSetter() == null-»
    throw "UnsupportedOperationException: «at.getFQN()»";
«ELSE-»
    «IF (boolean) GLOBALVAR ignoreJavaBody-»
    throw "UnsupportedOperationException: «at.getFQN()»";
    «ELSE-»
    «at.getSetter()»
    «ENDIF-»
«ENDIF-»
	«ENDPROTECT»
«ELSE-»
#ifdef ECORECPP_NOTIFICATION_API
    «at.getCPPTypeSignature()» _old_«at.name» = «at.getAttrMemberName()»;
#endif
    «at.getAttrMemberName()» = _«at.name»;
#ifdef ECORECPP_NOTIFICATION_API
    if (eNotificationRequired())
    {
        ::ecorecpp::notify::Notification notification(
                ::ecorecpp::notify::Notification::SET,
                _this(),
                «EPackage.getFeatureGetMemberCall(at)»,
                _old_«at.name»,
                «at.getAttrMemberName()»
            );
        eNotify(&notification);
    }
#endif
«ENDIF-»
}

«IF at.isList() || at.isMultiple()-»
«at.getAddCPPSignature(name+"::")»    
{
«IF !at.volatile-»
    «at.getAttrMemberName()».push_back( _new_element_in_«at.name» );
«ELSE-»
«PROTECT CSTART '/*' CEND '*/' ID (name+"Impl_"+"Add_"+at.getIPPFileUniqueName()) DISABLE»
    // Please, enable the protected region if you add manually written code.
    // To do this, add the keyword ENABLED before START.
	throw "UnsupportedOperationException: «at.getFQN()»";
«ENDPROTECT-»
«ENDIF-»
}

«at.getSetAtCPPSignature(name+"::")»    
{
«IF !at.volatile-»
    «LET at.getAttrMemberName() AS attrn-»
    «IF at.upperBound > 0-»«REM»must be greater than 1 also«ENDREM»
    if (_position + 1 > «at.upperBound»)
        throw "Attribute counter out of bounds!";
    «ENDIF-»
    if ( _position >= «attrn».size() )
        «attrn».resize(_position + 1, «at.getCPPTypeSignatureImpl()»());

    «attrn»[_position] = _new_element_in_«at.name»;
    «ENDLET-»
«ELSE-»
«PROTECT CSTART '/*' CEND '*/' ID (name+"Impl_"+"SetAt_"+at.getIPPFileUniqueName()) DISABLE»
    // Please, enable the protected region if you add manually written code.
    // To do this, add the keyword ENABLED before START.
	throw "UnsupportedOperationException: «at.getFQN()»";
«ENDPROTECT-»
«ENDIF-»
}

«at.getDeleteAtCPPSignature(name+"::")»    
{
«IF !at.volatile-»
    «LET at.getAttrMemberName() AS attrn-»
    «IF at.upperBound > 0-»«REM»must be greater than 1 also«ENDREM»
    if (_position + 1 > «at.upperBound»)
        throw "Attribute counter out of bounds!";
    «ENDIF-»
    if (_position >= «attrn».size())
        throw "Attribute counter out of bounds!";
    
    // TODO: This is not actually quite true
    if (_position == «attrn».size() - 1)
        «attrn».resize(_position);
    «ENDLET-»
«ELSE-»
«PROTECT CSTART '/*' CEND '*/' ID (name+"Impl_"+"DeleteAt_"+at.getIPPFileUniqueName()) DISABLE»
    // Please, enable the protected region if you add manually written code.
    // To do this, add the keyword ENABLED before START.
	throw "UnsupportedOperationException: «at.getFQN()»";
«ENDPROTECT-»
«ENDIF-»
}
«ENDIF-»
«ENDIF-»
«ENDFOREACH-»

// References
«FOREACH this.EReferences AS ref-»
	«REM»Always create a const getter«ENDREM»
«ref.getGetCPPSignatureConst(name+"::")»
{
    «IF !ref.isMultiple()-»
    return «ref.getRefMemberNameLocked()»;
    «ELSE-»
    if (!«ref.getRefMemberName()»)
    	return const_cast<«name»*>(this)->get«ref.name.toFirstUpper()»();
    
    return *«ref.getRefMemberName()»;
    «ENDIF-»
}

    «IF ref.isMultiple()-»
		«REM»In case of a container emit another non-const version«ENDREM»
«ref.getGetCPPSignature(name+"::")»
{
	«PROTECT CSTART '/*' CEND '*/' ID name+"__get"+ref.name.toFirstUpper() DISABLE»
    // Please, enable the protected region if you add manually written code.
    // To do this, add the keyword ENABLED before START.
 
	if (!«ref.getRefMemberName()»)
		«ref.getRefMemberName()».reset(new «ref.getListImpl()»(«ref.getListImplConstructorParameters()»));
   «ENDPROTECT»
    return *«ref.getRefMemberName()»;
}

    «ELSE-»
	   «IF ref.EOpposite != null-»
«ref.getGetCPPSignature(name+"::basic")»
{
    return «ref.getRefMemberNameLocked()»;
}
       «ENDIF-»

       «IF ref.EOpposite != null-»
«ref.getSetCPPSignature(name+"::basic")»
       «ELSE-»
«ref.getSetCPPSignature(name+"::")» 
       «ENDIF-»
{
    «IF ref.containment-»
        if («ref.getMemberName()»)
            «ref.getMemberName()»->_setEContainer(«name»_ptr(), «EPackage.getFeatureGetMemberCall(ref)»);
        if (_«ref.name»)
            _«ref.name»->_setEContainer(_this(), «EPackage.getFeatureGetMemberCall(ref)»);
    
    «ENDIF-»
#ifdef ECORECPP_NOTIFICATION_API
    «ref.getPtr()» _old_«ref.name» = «ref.getRefMemberNameLocked()»;
#endif
    «ref.getRefMemberName()» = _«ref.name»;

#ifdef ECORECPP_NOTIFICATION_API
    if (eNotificationRequired())
    {
        ::ecorecpp::notify::Notification notification(
                ::ecorecpp::notify::Notification::SET,
                _this(),
                «EPackage.getFeatureGetMemberCall(ref)»,
                _old_«ref.name»,
                «ref.getRefMemberNameLocked()»
            );
        eNotify(&notification);
    }
#endif
}

    «IF ref.EOpposite != null-»
«ref.getSetCPPSignature(name+"::")»
{
	«ref.getPtr()» _old_«ref.name» = «ref.getRefMemberNameLocked()»;
	if (_«ref.name» != _old_«ref.name»)
	{
		::ecore::EJavaObject _this = ::ecore::EObject::_this();
                if (_old_«ref.name»)
		{
		        _old_«ref.name»->::ecore::EObject::_inverseRemove(
			    «ref.EOpposite.EContainingClass.EPackage.getPackageFQN()»::_instance()->«ref.EOpposite.EContainingClass.EPackage.getFeatureGetMember(ref.EOpposite)»(),
			    _this);
		}
		if (_«ref.name» && «ref.EOpposite.EContainingClass.EPackage.getPackageFQN()»::_instance())
		{
		        _«ref.name»->::ecore::EObject::_inverseAdd(
			    «ref.EOpposite.EContainingClass.EPackage.getPackageFQN()»::_instance()->«ref.EOpposite.EContainingClass.EPackage.getFeatureGetMember(ref.EOpposite)»(),
			    _this);
		}
		«ref.getSetCPPCall("basic")»(_«ref.name»);
	}
}
       «ENDIF-»

    «ENDIF-»
«ENDFOREACH-»

«ENDFILE»
«ENDDEFINE»
