«REM»
Package.xpt
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>
Copyright (C) INCHRON GmbH 2016 <soeren.henning@inchron.com>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Mapping»
«EXTENSION template::IDs»
«EXTENSION template::Classes»
«EXTENSION template::Packages»
«EXTENSION template::Types»

«DEFINE hppcpp FOR EPackage»
«FILE getPackagePrefix()+".hpp"-»
«IF (boolean) GLOBALVAR internalLicense»
«EXPAND template::License::License FOR getPackagePrefix()+".hpp"-»
«ELSE»
«EXPAND template::EndUserLicense::License FOR getPackagePrefix()+".hpp"-»
«ENDIF»
#ifndef _«getHeaderDef()»PACKAGE_HPP
#define _«getHeaderDef()»PACKAGE_HPP

#include <ecore/EPackage.hpp>
#include <«getFQN("/")»_forward.hpp>
#include <ecorecpp/PackageDeleter.hpp>

«FOREACH getPackageIncludeFiles() AS e-»
#include <«e.getFQN("/")»/«e.getPackageName()».hpp>
«ENDFOREACH-»

#include <«getDllExtensionPrefix()».hpp>

«EXPAND template::EClassHPP::namespaces_begin FOR this-»

class EXPORT_«getExportDLL()»_DLL «name.toFirstUpper()»Package : public virtual ::ecore::EPackage
{
public:

    static «name.toFirstUpper()»Package_ptr _instance();
    static «name.toFirstUpper()»Package_ptr _getInstanceAndRemoveOwnership();

«FOREACH EClassifiers.sortBy(e|e.name).sortBy(e|e.name.toUpperCase()) AS class ITERATOR it»
    // IDs for classifier «class.name»
    static const int «class.name.toUpperCase()» = «it.counter0»;
	«IF EClass.isInstance(class)-»
		«FOREACH ((EClass)class).EAllStructuralFeatures AS esf-»
			static const int «esf.getFeatureIDFQN((EClass)class)» = «((EClass)class).getFeatureIDValue(esf)»;
		«ENDFOREACH-»
		static const int «class.name.toUpperCase()»_FEATURE_COUNT = «((EClass)class).getFeatureCount()»;
	«ENDIF-»
«ENDFOREACH»

	// EClassifiers methods
«FOREACH EClassifiers AS class»
    virtual ::ecore::«class.eClass().name»_ptr «getPackageGetAttribute(class)»();
«ENDFOREACH»

	// EStructuralFeatures methods
«FOREACH this.getStructuralFeatures() AS ef»
    virtual ::ecore::«ef.eClass().name»_ptr «getFeatureGetMember(ef)»();
«ENDFOREACH»

protected:

    static ::ecore::Ptr< «name.toFirstUpper()»Package > s_instance;

    «name.toFirstUpper()»Package();
    void _initPackage();

«FOREACH EClassifiers.sortBy(e|e.name) AS classifier-»
    ::ecore::«classifier.eClass().name»_ptr «getPackageAttribute(classifier)»;
«ENDFOREACH-»

    // EStructuralFeatures instances
«FOREACH this.getStructuralFeatures() AS ef»
    «ef.eClass().getCPPOwnership()» «getFeatureMember(ef)»;
«ENDFOREACH»
};

«EXPAND template::EClassHPP::namespaces_end FOR this»

#endif // _«getHeaderDef()»PACKAGE_HPP

«ENDFILE»

«FILE getPackagePrefix()+".cpp"-»
«IF (boolean) GLOBALVAR internalLicense»
«EXPAND template::License::License FOR getPackagePrefix()+".cpp"-»
«ELSE»
«EXPAND template::EndUserLicense::License FOR getPackagePrefix()+".cpp"-»
«ENDIF»
#include <«getPackagePrefix()».hpp>

using namespace ::«getFQN()»;

::ecore::Ptr< ::«getPackagePrefix("::")» > «name.toFirstUpper()»Package::s_instance;

::«getPackagePrefix("::")»_ptr «name.toFirstUpper()»Package::_instance()
{
    static bool duringConstruction = false;
    if (!s_instance.get()) {
        if (duringConstruction)
            return ::ecore::Ptr< «name.toFirstUpper()»Package >();
        duringConstruction = true;
        s_instance = ::ecore::Ptr< «name.toFirstUpper()»Package >( new «name.toFirstUpper()»Package() );
        s_instance->_initPackage();
        duringConstruction = false;
    }

    return s_instance;
}

::«getPackagePrefix("::")»_ptr «name.toFirstUpper()»Package::_getInstanceAndRemoveOwnership()
{
    return _instance();
}

«ENDFILE»

«ENDDEFINE»
